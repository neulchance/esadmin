{
  "root": true,
  "parser": "@typescript-eslint/parser",
  "ignorePatterns": [
    "projects/**/*"
  ],
  "overrides": [
    {
      "files": [
        "*.ts"
      ],
      "extends": [
        "eslint:recommended",
        "plugin:@typescript-eslint/recommended"
      ],
      "rules": {
        "object-curly-spacing": ["error", "never"],
        "@typescript-eslint/ban-types": [
          "error",
          {
            "types": {
              "Object": false
            },
            "extendDefaults": true
          }
        ],
        "no-empty-function": "off",
        "@typescript-eslint/no-empty-function": "off"
      }
    },
    {
      "files": [
        "*.html"
      ],
      "extends": [
      ],
      "rules": {}
    },
    // By default, the ESLint CLI only looks at .js files. But, it will also look at
    // any files which are referenced in an override config. Most users of typescript-eslint
    // get this behavior by default by extending a recommended typescript-eslint config, which
    // just so happens to override some core ESLint rules. We don't extend from any config, so
    // explicitly reference TS files here so the CLI picks them up.
    //
    // ESLint in VS Code will lint any opened file (so long as it's not eslintignore'd), so
    // that will work regardless of the below.
    //
    // The same applies to mjs files; ESLint appears to not scan those either.
    { "files": ["*.ts", "*.mts", "*.cts", "*.mjs", "*.cjs"] },
    {
      "files": ["*.mjs", "*.mts"],
      "rules": {
          // These globals don't exist outside of CJS files.
          "no-restricted-globals": [
              "error",
              { "name": "__filename" },
              { "name": "__dirname" },
              { "name": "require" },
              { "name": "module" },
              { "name": "exports" }
          ]
      }
    },
  ]
}
